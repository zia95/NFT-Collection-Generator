<#
.SYNOPSIS
    Generate the nfts and its metadata from the sequence file.
.DESCRIPTION
    Generate the nfts and its metadata from the sequence file.
.EXAMPLE
    .\Get-NFTMerger.ps1 -Multithreaded -ConfigFile .\testconfig.json -SequenceFile .\testseqfile.json -OutputDirectory .\output -PluginModuleFilePath .\plugin.test.psm1
    Loading plugin module...
#>
#Requires -Version 6.0
[CmdletBinding()]
param(
    #Config file where all the layer data is stored.
    [Parameter(Mandatory=$true)]
    [ValidateScript({((Test-Path $_) -and (Test-Json (Get-Content $_ -Raw)))}, ErrorMessage="Config file does not exist or it is invalid")]
    [string]$ConfigFile,
    #Sequence file which was generated by nft trait sequence generator.
    [Parameter(Mandatory=$true)]
    [ValidateScript({((Test-Path $_) -and (Test-Json (Get-Content $_ -Raw)))}, ErrorMessage="Sequence file does not exist or it is invalid")]
    [string]$SequenceFile,
    #Output directory is where all the generated files will be stored.
    [Parameter(Mandatory=$true)]
    [ValidateScript({(Test-Path $_) -and ((Get-ChildItem $_).Length -eq 0)}, ErrorMessage="Need an empty directory to store the output")]
    [string]$OutputDirectory,
    #To control over the metadatas which are generated.
    [ValidateScript({Test-Path $_}, ErrorMessage="The specified plugin module does not exist.")]
    [string]$PluginModuleFilePath,
    #Use multithreading to generate nfts and metadata, this will speedup the process but will take more system resources.
    [switch]$Multithreaded
)

Get-Module "nftgen.commons" | Remove-Module
Import-Module "./nftgen.commons.psm1" -Scope Local



[bool]$plugin_module_present = Test-Path $PluginModuleFilePath;

if($plugin_module_present)
{
    Write-Host "Loading plugin module...";
    $module_name = [System.IO.Path]::GetFileNameWithoutExtension($PluginModuleFilePath)
    Get-Module $module_name | Remove-Module
    Import-Module $PluginModuleFilePath -Scope Local
    if(!$?) {
        Write-Error "Failed to load plugin module."
        exit 1
    }
}

$OutputDirectory = Resolve-Path $OutputDirectory

#[System.Collections.Generic.Dictionary[string, int[]]]$layers_dict = Get-LayersDict -ConfigFile $ConfigFile;
$config = ConvertFrom-Json (Get-Content $ConfigFile -Raw)

$sequences = Get-Content (Resolve-Path $SequenceFile) | ConvertFrom-Json


function Merge-TraitImages
{
    [CmdletBinding()]
    param (
        [ValidateNotNullOrEmpty()]
        [string[]]$Images,
        [ValidateNotNullOrEmpty()]
        [string]$OutputFile
    )

    Write-Information "Merging total $($Images.Length) traits"
    [System.Drawing.Graphics]$g = $null;
    [System.Drawing.Bitmap]$img = $null;
    for($i = 0; $i -lt $Images.Length; $i++)
    {
        #Write-Information "Merging: $($Images[$i])"
        if($null -eq $g)
        {
            $img = [System.Drawing.Bitmap]::FromFile((Resolve-Path $Images[$i]));
            $g = [System.Drawing.Graphics]::FromImage($img);
        }
        else
        {
            $img2 = [System.Drawing.Bitmap]::FromFile((Resolve-Path $Images[$i]));
            $g.DrawImage($img2, 0.0, 0.0, $img2.Width, $img2.Height);
            $img2.Dispose();
        }
    }
    Write-Information "Saving merged file: $OutputFile"
    $img.Save($OutputFile);
    $g.Dispose();
    $img.Dispose();
}
function Get-ERC721Metadata
{
    param (
        [int]$Id,
        [ValidateNotNullOrEmpty()]
        [PSCustomObject[]]$Sequence,
        [PSCustomObject]$Config
    )
    
    #[System.Collections.Generic.List[PSCustomObject]]$traits = [System.Collections.Generic.List[PSCustomObject]]::new()
    $metadata_attributes = $Sequence | ForEach-Object {
        if($_.TraitSourceIndex -eq 0)
        {
            $t_type = $Config.layers[$_.LayerIndex].name;
            $t_val = $Config.layers[$_.LayerIndex].traits[$_.TraitIndex].name;
            [PSCustomObject]@{
                trait_type = $t_type
                value = $t_val
            }
        }
    }
    $metadata = [PSCustomObject]@{
        name = "NFT #$Id"
        description = "This NFT Id is #$Id"
        image = "ipfs://__CID__/$Id.png"
        attributes = $metadata_attributes
    }

    return $metadata;
}
function Get-TraitImagesFromSequence
{
    param(
        [ValidateNotNullOrEmpty()]
        [PSCustomObject[]]$Sequence,
        $Config
    )
    foreach($t in $Sequence)
    {
        $Config.layers[$t.LayerIndex].traits[$t.TraitIndex].sources[$t.TraitSourceIndex];
    }
}


$total_seq = $sequences.Sequences.Length;
$total_completed = 0;

if($Multithreaded)
{
    $get_trait_images_from_sequence = ${function:Get-TraitImagesFromSequence}.ToString()
    $merge_traits_images_func = ${function:Merge-TraitImages}.ToString()
    $get_erc721_metadata_func = ${function:Get-ERC721Metadata}.ToString()
    $confirm_erc721_metadata_func = $null
    if($plugin_module_present)
    {
        $confirm_erc721_metadata_func = ${function:Confirm-ERC721Metadata}.ToString()
    }
    0..($sequences.Sequences.Length-1) | ForEach-Object -Parallel {
        ${function:Get-TraitImagesFromSequence} = $using:get_trait_images_from_sequence;
        ${function:Merge-TraitImages} = $using:merge_traits_images_func;
        ${function:Get-ERC721Metadata} = $using:get_erc721_metadata_func;
        ${function:Confirm-ERC721Metadata} = $using:confirm_erc721_metadata_func;

        Write-Information "Current: $_";
        $seq = $using:sequences.Sequences;
        Write-Information "Current: $($seq[$_])";
        $sequences_to_paths = Get-TraitImagesFromSequence -Sequence $seq[$_] -Config $using:config;
        $nft_output = Join-Path $using:OutputDirectory "$_.png"
        $metadata_output = Join-Path $using:OutputDirectory "$_.json"
        Merge-TraitImages $sequences_to_paths $nft_output
        $metadata = Get-ERC721Metadata -Id $_ -Sequence $seq[$_] -Config $using:config;
        
        if($using:plugin_module_present)
        {
            $metadata = Confirm-ERC721Metadata -Id $_ -GeneratedSequence $seq[$_] -GeneratedMetadata $metadata -LayersConfig $using:config;
        }
        
        $metadata | ConvertTo-Json -Compress >> $metadata_output
        $_
    } | ForEach-Object {
        $total_completed++;
        $work_done_pc = ($total_completed / $total_seq) * 100
        #Write-Information "Total $total_completed out of $total_seq completed."
        Write-Progress -Activity "Merging in Progress" -Status "$work_done_pc% Complete, Finished: $_.png" -PercentComplete $work_done_pc
    }
}
else
{
    0..($sequences.Sequences.Length-1) | ForEach-Object {
    
        Write-Information "Current: $_";
        $seq = $sequences.Sequences;
        Write-Information "Current: $($seq[$_])";
        $sequences_to_paths = Get-TraitImagesFromSequence -Sequence $seq[$_] -Config $config;
        $nft_output = Join-Path $OutputDirectory "$_.png"
        $metadata_output = Join-Path $OutputDirectory "$_.json"
        Merge-TraitImages $sequences_to_paths $nft_output
        $metadata = Get-ERC721Metadata -Id $_ -Sequence $seq[$_] -Config $config;
        
        if($plugin_module_present)
        {
            $metadata = Confirm-ERC721Metadata -Id $_ -GeneratedSequence $seq[$_] -GeneratedMetadata $metadata -LayersConfig $config;
        }
        
        $metadata | ConvertTo-Json -Compress >> $metadata_output
        $_
    } | ForEach-Object {
        $total_completed++;
        $work_done_pc = ($total_completed / $total_seq) * 100
        #Write-Information "Total $total_completed out of $total_seq completed."
        Write-Progress -Activity "Merging in Progress" -Status "$work_done_pc% Complete, Finished: $_.png" -PercentComplete $work_done_pc
    }
}